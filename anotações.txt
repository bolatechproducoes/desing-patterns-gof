=== DESING PATTERNS - GoF ===


=== # CREATIONAL PATTERNS # ===

- Padrões de criação, tem como objetivo abstrair o processo de instanciação
  dos objetos e encapsular o conhecimento sobre as classes concretas utilizadas.
- São padrões relacionados com a criação de objetos.
- Tem seu foco nas interfaces dos objetos e não na implementação. 

=== SINGLETON ===

- Garantir que uma classe tenha somente uma instância no programa e fornecer
  um ponto de acesso global para a mesma.
- Geralmente utilizado para acessar recursos compartilhados como acesso à
  base de dados, interfaces gráficas, sistemas de arquivos, etc...
- Pode ser utilizado para substituir variáveis globais.
- Utiliza construtor privado e cria uma única instância através do getter.
- Utilizado para ter uma instância disponível em todo o programa.
- Utilizado para substituir variáveis globais. 

   === BUILDER ===

- Separar a construção de um objeto complexo da sua representação de modo que
  o mesmo processo de construção possa criar diferentes representações.
- Propõe separar o código que cria do código que usa o objeto.
- Refere-se a criação de objetos com grande complexidade, com construtores muito
  complexos, formado através da composição de vários objetos ou dependente de
  algoritmos complexos de criação.
- Permite construir objetos em etapas.
- Permite 'method chaining' sequencias de encadeamento de metódos.
- O objeto final pode variar de acordo com a necessidade.
- É um padrão complexo.

   === PROTOTYPE ===

- Especificar os tipos de objeto a serem criados usando uma instância-protótipo
  e criar novos objetos pela cópia desse protótipo.
- JavaScritp e TypeScript são linguagens baseadas em protótipos. Para isso
  utiliza o método: Object.create(prototypeObject)
- É possivel literalmente fazer um objeto herdar de outro.
- A herança é delegada ao protótipo pelo objeto.
- Determina o tipo de objeto a ser criado pelo seu protótipo.
- É utilizado para evitar a recriação de objetos 'caros', que demandam muito
  serviço de construção ou recursos computacionais.
- Ajuda a evitar a explosão de subclasses (uso do extends).
- É possível manter registro dos objetos protótipos.
- Geralmente é criado apenas com um método 'clone' dentro do objeto protótipo.
- Não deixa as classes visiveis para os códigos que utilizam os objetos clone.

   === FACTORY METHOD ===

- Definir a interface para criar um objeto, delegando as subclasses a decisão
  de que classe instanciar.
- Permite adiar a instanciação para as subclasses.
- Factorys são operações que criam objetos.
- Oculta a lógica de instanciação do código cliente.
- Pode ser criado ou sobrescrito por subclasses.
- Permite a criação de novas factorys sem alterar o código já escrito.
- Permite utilizar parâmetros para definir o objeto que será criado.
- Utilizado quando não se sabe os tipos de objeto que serão necessários
  ao código.
- Permite a exetensão da factory para criar novos objetos seguindo o OCP do
  SOLID.
- Desacopla o código que cria do que utiliza o código seguindo o SRP do SOLID.
- Serve de hook para que as subclasses decidam a lógica de criação do objeto.
- Utilizado para eliminar a duplicação de código na criação de objetos.

   === ABSTRACT FACTORY ===

- Fornece interface de criação de familias/grupos de objetos relacionados ou
  dependentes sem espicificar suas classes concretas.
- Geralmente e composto por vários Factory Methods.
- Tende a agrupar famílias de produtos compatíveis criando uma fábrica concreta
  para cada grupo/família de objetos.
- Separa o código que cria do que utiliza os objetos seguindo o SRP do SOLID.
- Facilita a implementação de novos grupos/famílias de objetos seguindo o
  OCP do SOLID.
- Os grupos podem ser utilizados para definir configurações ou padrões distintos
  para grupos distintos, como por exemplo uma familia tem o padrão de um OS
  especifíco e a outra de outro, ou uma traz as configurações de conexão com
  um bd e a outra a de outro bd.
- Facilita para gerar relação e composição entre objetos de uma mesma família.
- Os objetos podem, ou não, ser utilizados em conjunto.
- É necessário restringir a relação dos objetos a sua família caso trabalhem
  em conjunto.
- Fornece uma biblioteca de classes de produtos revelando somente suas
  interfaces e não sua implementação.
- Garante a compatibilidade entre objetos da mesma família.

   === # STRUCTURAL ===

- Se preocupam com a forma como os objetos são compostos para formar
  estruturas maiores.

   === COMPOSITE ===

- Utiliza estrutura de árvore para representar a hierarquia das partes.
- Permite que os clientes tratem de maneira uniforme, tanto objetos individuais,
  quanto composições de objetos.
- Permite utilizar objetos simples para criar estruturas complexas.
- Organiza a herança entre objetos atráves de hierarquia.
- Na organização da árvore/tree, os nós internos são os objetos Composite,
  e os nós externos (finais) são os objetos Leaf (responsável pelo serviço
  final do composite).
- Utiliza métodos para implementar, remover e obter os nós nos composites e leafs.
- Os objetos composite delegam o serviço para as estruturas filhos e os objetos
  leaf são os que executam o serviço.
- Serve para que o código cliente trate da mesma forma objetos simples e compostos.
- Facilita o polimorfismo, a recursão e a inclusão de novos elementos.
- Tende a quebrar o padrão ISP do SOLID.

   === ADAPTER ===

- Tem como objetivo converter a interface de uma classe em outra classe, que
  seja esperada pelo código cliente.
- Permite que algumas classes trabalhem junto mesmo tendo interfaces imcompatíveis.
- Funciona com um adaptador, gera compatibilidade entre interfaces incompatíveis.
- Utilizado para definir limites dentro de camadas da aplicação.
- Pode ser utilizado para compatibilizar interfaces de código legado com um
  novo código.
- Utiliza estrutura por composição ou herança múltipla (herança múltipla nem
  todas as linguagens suportam).
- Liga a solicitação do código cliente com o framework, lib ou código próprio
  que irá executar a ação solicitada.
- Facilita a manutenção e troca de framework, libs e códigos legados concentrando
  em um único ponto (adapter) a necessidade de alteração de código para adaptar
  ao novo código.
- Utilizado para deixar o código sem dependência direta de código legado ou de
  terceiros.
- Pode servir para adicionar funcionalidades em subclasses sem ter que extende-las,
  similar ao que o Decorator faz.
- Diferente do bridge faz as ações funcionarem depois de terem sido projetadas.
- Aplica o SRP e o OCP do SOLID.

   === BRIDGE ===

- Bastante similar ao adapter (o que diferencia é a intenção).
- A intenção do bridge é desacoplar uma abstração de sua implementação, para
  que as duas possam variar e evoluir independemente ( ABSTRAÇÃO - é um código
  de alto nível que geralmente delega ações para outro objeto, IMPLEMENTAÇÃO -
  é o código que realiza as tarefas).
- Diferente do adapter faz as ações funcionarem antes de existirem.
- Utiliza composição em vez de herança.
- Utilizado no desenvolvimento do software quando o sistema for ter variações de
  abstrações e implementações (é aplicado no desenvolvimento quando se percebe que
  haverá a necessidade de criar adapters futuramente no código que esta sendo
  desenvolvido).
- Utilizado para trocar implementações durante o tempo de execução.
- Aplica o SRP e implementa o OCP do SOLID.

   === DECORATOR ===

- Tem como função agregar responsabilidades adicionais a um objeto de forma
  dinâmica.
- Fornece uma alternativa flexível a utilização de subclasses para extender
  funcionalidades.
- Adiciona funcionalidades sem alterar o objeto original.
- Utiliza composição ao invés de herança.
- Utilizado para adicionar funcionalidades em tempo de execução.
- Finge ser o objeto decorado, mas repassa as chamadas de método ao objeto.
- Pode executar ações antes e depois das chamadas de método do objeto decorado.
- Pode manipular dados antes do retorno.
- Utilizado para adicionar funcionalidades sem alterar o código existente.
- Utilizado quando se quer ter composição ao invés de herança.
- Utilizado para reduzir as subclasses.
- Pode se utilizar mais de um decorator em um objeto.
- Aplica OCP do SOLID.

   === FAÇADE ===

- Tem como intenção fornecer uma interface unificada para um conjunto de interfaces
  em um subsistema.
- Define uma interface de alto nível para facilitar o uso do subsistema (cria um
  objeto de fachada para um sistema mais complexo).
- Tem por objetivo unificar a chamada de métodos de diversos objetos em uma única
  interface.
- Não tem a intenção de ocultar nada do código cliente, somente facilitar o acesso
  aos metódos e valores.
- É comum se tornar uma 'God Class' que faz tudo, quebrando o SRP do SOLID, mas
  permite a criação de fachadas(façade) adicionais que podem ser utilizados por
  códigos cliente ou por outras fachadas minizando este problema.
- Utilizado para criar pontos de entrada para determinadas partes de um sistema.
- Tem como vantagem facilitar o acesso as entradas do sistema.

   === PROXY ===

- Tem como intenção fornecer um substituto ou marcador de localização para outro
  objeto com o objetivo de controlar o acesso a esse objeto.
- Utiliza a composição como o Composite e Decorator.
- Utiliza um objeto proxy que finge ser um objeto real.
- Utilizado para controle de acesso, logs, ache, lazy instantiation, lazy evaluation
  e distribuição de serviços.
- Escolhe como e quando repassar chamadas de métodos para o objeto real.
- Pode executar ações antes e depois das chamadas de método do objeto real.
- Tem variações: proxy virtual, proxy remoto, proxy de proteção, proxy inteligente,
  proxy de logs, etc...
- Proxy Virtual: controla o acesso a recursos que podem ser caros para criar ou
                 utilizar.
- Proxy Remoto: controla o acesso a recursos que estão em servidores remotos.
- Proxy de Proteção: controla o acesso a recursos que necessitam de autenticação
                     ou permissões.
- Proxy Inteligente: além de controlar acesso ao objeto, também executa tarefas
                     adicionais para saber quando e como executar determinadas ações.
- Implementa o OCP do SOLID.

   === FLYWEIGHT ===

- Utilizado para refatoração quando o sistema tem um grande consumo de memória.
- Tem como objetivo utilizar o compartilhamento para suportar grandes quantidades
  de objetos de forma granular.
- Separa as partes mutaveis(extrinseco) das não mutaveis(intrinseco) dos objetos para
  compartilhar as não mutaveis e diminuir o uso da memória.
- É um padrão de otimização.
- Só deve ser utilizado para solucionar problemos de uso excessivo de memória RAM.
- Só utilize se for realmente necessário e a maioria dos estados do objeto puderem
  se tornar extrinsecos.

   === # BEHAVIOURAL ===

- Se preocupam com algoritmos e a atribuição de responsabilidades entre objetos.
- Além de descrever padrões de objetos e classes também podem descrever os padrões
  de comunicação entre eles.
- Afastam o foco do fluco de controle e permitem se concentrar na maneira como
  os objetos são interconectados.

   === STRATEGY ===

- Tem como objetivo definir uma família de algoritmos, encapsular cada um deles
  e fazê-los intercambiáveis.
- Permite que algoritmos variem indendente dos clientes que o utilizam.
- Permite separar as variações dos algoritmos da regra de negócio - SRP.
- Define uma família de algoritmos onde cada um tem uma variação diferente.
- Permite a troca de algoritmos em tempo de execução através da composição.
- Permite criar varios algoritmos sem a necessidade de condicionais.
- Utilize para substituir condicionais que só alteram o valor final de um algoritmo.
- Aplica SRP e OCP do SOLID.
- O resultado do Strategy pode ser obtido através de funções.