=== DESING PATTERNS - GoF ===


=== # CREATIONAL PATTERNS # ===

- Padrões de criação, tem como objetivo abstrair o processo de instanciação
  dos objetos e encapsular o conhecimento sobre as classes concretas utilizadas. 

=== SINGLETON ===

- Garantir que uma classe tenha somente uma instância no programa e fornecer
  um ponto de acesso global para a mesma.
- Geralmente utilizado para acessar recursos compartilhados como acesso à
  base de dados, interfaces gráficas, sistemas de arquivos, etc...
- Pode ser utilizado para substituir variáveis globais.
- Utiliza construtor privado e cria uma única instância através do getter.
- Utilizado para ter uma instância disponível em todo o programa.
- Utilizado para substituir variáveis globais. 

   === BUILDER ===

- Separar a construção de um objeto complexo da sua representação de modo que
  o mesmo processo de construção possa criar diferentes representações.
- Propõe separar o código que cria do código que usa o objeto.
- Refere-se a criação de objetos com grande complexidade, com construtores muito
  complexos, formado através da composição de vários objetos ou dependente de
  algoritmos complexos de criação.
- Permite construir objetos em etapas.
- Permite 'method chaining' sequencias de encadeamento de metódos.
- O objeto final pode variar de acordo com a necessidade.
- É um padrão complexo.

   === Prototype ===

- Especificar os tipos de objeto a serem criados usando uma instância-protótipo
  e criar novos objetos pela cópia desse protótipo.
- JavaScritp e TypeScript são linguagens baseadas em protótipos. Para isso
  utiliza o método: Object.create(prototypeObject)
- É possivel literalmente fazer um objeto herdar de outro.
- A herança é delegada ao protótipo pelo objeto.
- Determina o tipo de objeto a ser criado pelo seu protótipo.
- É utilizado para evitar a recriação de objetos 'caros', que demandam muito
  serviço de construção ou recursos computacionais.
- Ajuda a evitar a explosão de subclasses (uso do extends).
- É possível manter registro dos objetos protótipos.
- Geralmente é criado apenas com um método 'clone' dentro do objeto protótipo.
- Não deixa as classes visiveis para os códigos que utilizam os objetos clone.

   === FACTORY METHOD ===

- Definir a interface para criar um objeto, delegando as subclasses a decisão
  de que classe instanciar.
- Permite adiar a instanciação para as subclasses.
- Factorys são operações que criam objetos.
- Oculta a lógica de instanciação do código cliente.
- Pode ser criado ou sobrescrito por subclasses.
- Permite a criação de novas factorys sem alterar o código já escrito.
- Permite utilizar parâmetros para definir o objeto que será criado.
- Utilizado quando não se sabe os tipos de objeto que serão necessários
  ao código.
- Permite a exetensão da factory para criar novos objetos seguindo o OCP do
  SOLID.
- Desacopla o código que cria do que utiliza o código seguindo o SRP do SOLID.
- Serve de hook para que as subclasses decidam a lógica de criação do objeto.
- Utilizado para eliminar a duplicação de código na criação de objetos.